substitutions:
  devicename: testing-fan

esphome:
  comment: "Testing mini fan"
  name: $devicename
  friendly_name: $devicename

esp32:
  board: lolin_d32
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret homeassistant_api

# Allow Over-The-Air updates
ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

i2c:
  scl: GPIO22
  sda: GPIO21

output:
  # Wire this pin (15) into the PWM pin of your 12v fan                                                                                                                                                                                  
  # ledc is the name of the pwm output system on an esp32                                                                                                                                                                                
  - platform: ledc
    id: fan_speed
    pin: GPIO26

    # 25KHz is standard PC fan frequency, minimises buzzing                                                                                                                                                                              
    frequency: "25000 Hz"

    # my fans stop working below 13% powerful.                                                                                                                                                                                           
    # also they're  powerful and loud, cap their max speed to 80%                                                                                                                                                                        
    min_power: 0%
    max_power: 100%

binary_sensor:
  - platform: status
    name: "Status"
    device_class: "connectivity"
    entity_category: "diagnostic"

button:
  - platform: restart
    name: "Restart"
    device_class: "restart"

sensor:
  - platform: bme280_i2c
    temperature:
      id: bme_temperature
      oversampling: 16x
      name: "Temperature"
      filters:
        - or:
          - heartbeat: 900s
          - delta: 0.15
      on_value_range:
        - above: 50.0
          then:
            if:
              condition:
                fan.is_off: fan_toggle
              then:
              - logger.log: "Set fan level 100 over 50C"
              - output.set_level:
                  id: fan_speed
                  level: 100%
        - above: 40.0
          then:
            if:
              condition:
                fan.is_off: fan_toggle
              then:
              - logger.log: "Set fan level 75 over 40C"
              - output.set_level:
                  id: fan_speed
                  level: 75%
        - above: 30.0
          then:
            if:
              condition:
                fan.is_off: fan_toggle
              then:
              - logger.log: "Set fan level 50 over 30C"
              - output.set_level:
                  id: fan_speed
                  level: 50%
        - above: 30.0
          then:
            if:
              condition:
                fan.is_off: fan_toggle
              then:
              - logger.log: "Set fan level 25 over 20C"
              - output.set_level:
                  id: fan_speed
                  level: 25%
        - below: 20.0
          then:
            if:
              condition:
                fan.is_off: fan_toggle
              then:
              - logger.log: "Set fan level 0 under 20C"
              - output.set_level:
                  id: fan_speed
                  level: 0%
    pressure:
      id: bme_pressure
      oversampling: 4x
      name: "Pressure"
    humidity:
      id: bme_humidity
      oversampling: 8x
      name: "Humidity"
      filters:
        - or:
          - heartbeat: 900s
          - delta: 0.15
    address: 0x76
    update_interval: 30s

  # RPM Signal from Fan                                                                                                                                                                                                                  
  - platform: pulse_counter
    pin:
      number: GPIO25
    name: Fan Speed
    id: fan_pulse
    unit_of_measurement: 'RPM'
    filters:
      - multiply: 0.5
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    update_interval: 30s

  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifisignal
    device_class: "signal_strength"
    entity_category: "diagnostic"
    update_interval: 60s

number:
  - platform: template
    name: "Fan Speed Override"
    id: fan_speed_override
    internal: false
    max_value: 100.0
    min_value: 0.0
    step: 25
    optimistic: true
    mode: slider
    on_value:
      then:
        if:
          condition:
            fan.is_on: fan_toggle
          then:
          - output.set_level:
              id: fan_speed
              level: !lambda "return x/100;"

fan:
  - platform: speed
    output: fan_speed
    name: Override Enable
    id: fan_toggle
    on_turn_on:
     - output.set_level:
          id: fan_speed
          level: !lambda |-
             return id(fan_speed_override).state/100.0;
    on_turn_off:
      - logger.log: "Power of Fan turned OFF"
      - delay: 1s
      - output.set_level:
          id: fan_speed
          level: !lambda |-
            if (id(bme_temperature).raw_state > 50){
              return 1;}
            else if (id(bme_temperature).raw_state > 40){
              return 0.75;}
            else if (id(bme_temperature).raw_state > 30){
              return 0.50;}
            else if (id(bme_temperature).raw_state > 20){
              return 0.25;}
            else
              return 0;