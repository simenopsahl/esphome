packages:
  # --- COMMON PACKAGES ---
  <<: !include_dir_named common

  # --- BOARD AND MODULES ---
  board: !include board/waveshare_epaper_driver.yaml

substitutions:
  common:
    log_level: WARN
#    log_baud_rate: "115200"
  device:
    name: waveshare-weather-station
    location: "2etg, Ellen & Svein"
  display:
    home_page: page_content

#external_components:
#  - source: github://pr#6209
#    components: [ waveshare_epaper ]

esphome:
  comment: "E-Ink E&S Display"
  name: ${device.name}
  friendly_name: ${device.name}
  area: ${device.location}
  project:
    version: "1.0"

# Now render everything on the ePaper screen.
display:
  - id: !extend display_eink
    model: 4.20in
    rotation: 270°
    pages:
      - id: page_content
        lambda: |-
          // Map weather states to MDI characters.
          std::map<std::string, std::string> weather_icon_map
            {
              {"clear-night", "\U000F0594"},
              {"cloudy", "\U000F0590"},
              {"cloudy-alert", "\U000F0F2F"},
              {"cloudy-arrow-right", "\U000F0E6E"},
              {"fog", "\U000F0591"},
              {"hail", "\U000F0592"},
              {"hazy", "\U000F0F30"},
              {"hurricane", "\U000F0898"},
              {"lightning", "\U000F0593"},
              {"lightning-rainy", "\U000F067E"},
              {"night", "\U000F0594"},
              {"night-partly-cloudy", "\U000F0F31"},
              {"partlycloudy", "\U000F0595"},
              {"partly-lightning", "\U000F0F32"},
              {"partly-rainy", "\U000F0F33"},
              {"partly-snowy", "\U000F0F34"},
              {"partly-snowy-rainy", "\U000F0F35"},
              {"pouring", "\U000F0596"},
              {"rainy", "\U000F0597"},
              {"snowy", "\U000F0598"},
              {"snowy-heavy", "\U000F0F36"},
              {"snowy-rainy", "\U000F067F"},
              {"sunny", "\U000F0599"},
              {"sunny-alert", "\U000F0F37"},
              {"sunny-off", "\U000F14E4"},
              {"sunset", "\U000F059A"},
              {"sunset-down", "\U000F059B"},
              {"sunset-up", "\U000F059C"},
              {"tornado", "\U000F0F38"},
              {"windy", "\U000F059D"},
              {"windy-variant", "\U000F059E"},
            };

          // Set graph color
          id(trace_temperature_ute)->set_line_color( id(epaper_text_color) );
          id(trace_temperature_foran)->set_line_color( id(epaper_text_color) );
          id(trace_temperature_bak)->set_line_color( id(epaper_text_color) );

          // Fill background.
          it.fill(id(epaper_bg_color));

          // Show loading screen before data is received.
          if (id(initial_data_received) == false) {
            it.printf(it.get_width()/2, it.get_height()/2, id(font_lg), id(epaper_text_color), TextAlign::TOP_CENTER, "Venter på data...");
          } else {

            // Weather Condition
            if (id(weather_condition_now).state == id(weather_condition_next).state) {
              it.printf(it.get_width()/2, 1, id(mdi_xxl), id(epaper_text_color), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
            } else {
              it.printf(90, 1, id(mdi_xxl), id(epaper_text_color), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
              it.printf(it.get_width()/2, 15, id(mdi_md), id(epaper_text_color), TextAlign::TOP_CENTER, "\U000F0142");
              it.printf(210, 1, id(mdi_xxl), id(epaper_text_color), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_condition_next).state.c_str()].c_str());
            }
            
            // Ute Temperature
            it.graph(0, 72, id(graph_ute), id(epaper_text_color));
            it.print(181, 74, id(font_xl), id(epaper_text_color), TextAlign::TOP_LEFT, "Ute");
            it.printf(180, 90, id(font_fl), id(epaper_text_color), TextAlign::TOP_LEFT, "%2.0f", id(temperature_ute).state);
            it.printf(it.get_width()-2, 120, id(font_xxl), id(epaper_text_color), TextAlign::TOP_RIGHT, "°C");

            // Foran Temperature
            it.graph(0, 177, id(graph_foran), id(epaper_text_color));
            it.print(181, 179, id(font_xl), id(epaper_text_color), TextAlign::TOP_LEFT, "Foran");
            it.printf(180, 195, id(font_fl), id(epaper_text_color), TextAlign::TOP_LEFT, "%2.0f", id(temperature_foran).state);
            it.printf(it.get_width()-2, 225, id(font_xxl), id(epaper_text_color), TextAlign::TOP_RIGHT, "°C");

            // Bak Temperature
            it.graph(0, 282, id(graph_bak), id(epaper_text_color));
            it.print(181, 284, id(font_xl), id(epaper_text_color), TextAlign::TOP_LEFT, "Bak");
            it.printf(180, 300, id(font_fl), id(epaper_text_color), TextAlign::TOP_LEFT, "%2.0f", id(temperature_bak).state);
            it.printf(it.get_width()-2, 330, id(font_xxl), id(epaper_text_color), TextAlign::TOP_RIGHT, "°C");

            // Refresh Timestamp
            // Code by EnsconcE from https://community.home-assistant.io/t/esphome-show-time/348903
            char str[17];
            time_t currTime = id(time_homeassistant).now().timestamp;
            strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
            it.printf(it.get_width()/2, it.get_height()-1, id(font_sm), id(epaper_text_color), TextAlign::BOTTOM_CENTER, "Oppdatert kl %s", str);
          }

# Include custom fonts
font: !include
  file: gui/fonts/fonts.yaml
  vars:
    text_sm: 18
    text_md: 20
    text_lg: 24
    text_xl: 28
    text_xxl: 32
    text_hg: 40
    text_fl: 62
    icons_sm: 34
    icons_md: 40
    icons_lg: 48
    icons_xl: 58
    icons_xxl: 70

# Check if person is home
binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.etg2_occupancy
    id: motion_detected

sensor:
  # Call sensors from HA.
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: temp_measured
    id: temperature_ute
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: temp_foran
    id: temperature_foran
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: temp_bak
    id: temperature_bak
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

# Strings from Home Assistant
text_sensor:
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_condition_now
    id: weather_condition_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_condition_0
    id: weather_condition_next
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

graph:
  - id: graph_ute
    duration: 12h
    width: 180
    height: 96
    border: false
    traces:
      - id: trace_temperature_ute
        sensor: temperature_ute
        line_thickness: 6
        continuous: true
  - id: graph_foran
    duration: 12h
    width: 180
    height: 96
    border: false
    traces:
      - id: trace_temperature_foran
        sensor: temperature_foran
        line_thickness: 6
        continuous: true
  - id: graph_bak
    duration: 12h
    width: 180
    height: 96
    border: false
    traces:
      - id: trace_temperature_bak
        sensor: temperature_bak
        line_thickness: 6
        continuous: true