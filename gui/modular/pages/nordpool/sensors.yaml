sensor:
  # Get values from home assistant
  - platform: homeassistant
    id: nordpool_price_0
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price0
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_price_0
          text:
            format: "%.0f"
            args: [ 'x' ]
  - platform: homeassistant
    id: nordpool_price_1
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price1
  - platform: homeassistant
    id: nordpool_price_2
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price2
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_price_2
          text:
            format: "%.0f"
            args: [ 'x' ]
  - platform: homeassistant
    id: nordpool_price_3
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price3
  - platform: homeassistant
    id: nordpool_price_4
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price4
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_price_4
          text:
            format: "%.0f"
            args: [ 'x' ]
  - platform: homeassistant
    id: nordpool_price_5
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price5
  - platform: homeassistant
    id: nordpool_price_6
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price6
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_price_6
          text:
            format: "%.0f"
            args: [ 'x' ]
  - platform: homeassistant
    id: nordpool_price_7
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price7
  - platform: homeassistant
    id: nordpool_price_8
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price8
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_price_8
          text:
            format: "%.0f"
            args: [ 'x' ]

  - platform: combination
    id: nordpool_price_min
    type: min
    sources:
      - source: nordpool_price_0
      - source: nordpool_price_1
      - source: nordpool_price_2
      - source: nordpool_price_3
      - source: nordpool_price_4
      - source: nordpool_price_5
      - source: nordpool_price_6
      - source: nordpool_price_7
      - source: nordpool_price_8

  - platform: combination
    id: nordpool_price_max
    type: max
    sources:
      - source: nordpool_price_0
      - source: nordpool_price_1
      - source: nordpool_price_2
      - source: nordpool_price_3
      - source: nordpool_price_4
      - source: nordpool_price_5
      - source: nordpool_price_6
      - source: nordpool_price_7
      - source: nordpool_price_8
    on_value:
      - script.execute: update_price_chart

text_sensor:
  # Strings from Home Assistant
  - platform: homeassistant
    id: nordpool_time_0
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time0
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_time_0
          text: !lambda return id(nordpool_time_0).state;
  - platform: homeassistant
    id: nordpool_time_2
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time2
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_time_2
          text: !lambda return id(nordpool_time_2).state;
  - platform: homeassistant
    id: nordpool_time_4
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time4
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_time_4
          text: !lambda return id(nordpool_time_4).state;
  - platform: homeassistant
    id: nordpool_time_6
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time6
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_time_6
          text: !lambda return id(nordpool_time_6).state;
  - platform: homeassistant
    id: nordpool_time_8
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time8
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_time_8
          text: !lambda return id(nordpool_time_8).state;

globals:
  # These arrays will be populated on boot by the initialize_graph_layout script
  - id: nordpool_points_y
    type: int[9]
    restore_value: no
    initial_value: '{0, 10, 20, 30, 40, 50, 60, 70, 80}'
  - id: nordpool_points_x
    type: int[9]
    restore_value: no
    initial_value: '{0, 10, 20, 30, 40, 50, 60, 70, 80}'

script:
  - id: initialize_graph_layout
    then:
      - lambda: |-
          // This script runs once on boot to set up the graph coordinates
          // based on the screen size defined in substitutions.
          const float scr_w = atoi("${screen_width}");
          const float scr_h = atoi("${screen_height}");
          const float status_h = atoi("${status_bar_height}");
          const float total_fr = atoi("${grid_row_top_fr}") + atoi("${grid_row_graph_fr}") + atoi("${grid_row_bottom_fr}");
          const float line_w = atoi("${line_width}");
          const float inset = line_w / 2.0;

          const float container_h = (atoi("${grid_row_graph_fr}") / total_fr) * (scr_h - 2 * status_h);
          const float container_w = scr_w;

          const float graph_w = container_w - line_w;
          const float graph_h = container_h - line_w;
          const int mid_y = (int)round(inset + graph_h / 2.0);

          for (int i = 0; i < 9; ++i) {
            float x_coord = i * (graph_w - 1) / 8.0;
            id(nordpool_points_x)[i] = (int)round(inset + x_coord);
            id(nordpool_points_y)[i] = mid_y;
          }

  - id: update_price_chart
    mode: single
    then:
      - lambda: |-
          // STEP 1: Calculate all Y coordinates and save them to the global array.
          float prices[9];
          prices[0] = id(nordpool_price_0).state;
          prices[1] = id(nordpool_price_1).state;
          prices[2] = id(nordpool_price_2).state;
          prices[3] = id(nordpool_price_3).state;
          prices[4] = id(nordpool_price_4).state;
          prices[5] = id(nordpool_price_5).state;
          prices[6] = id(nordpool_price_6).state;
          prices[7] = id(nordpool_price_7).state;
          prices[8] = id(nordpool_price_8).state;

          float min_p = id(nordpool_price_min).state;
          float max_p = id(nordpool_price_max).state;

          if (isnan(min_p) || isnan(max_p)) { return; }
          for (int i = 0; i < 9; ++i) {
            if (isnan(prices[i])) { return; }
          }

          const float scr_h = atoi("${screen_height}");
          const float status_h = atoi("${status_bar_height}");
          const float total_fr = atoi("${grid_row_top_fr}") + atoi("${grid_row_graph_fr}") + atoi("${grid_row_bottom_fr}");
          const float line_w = atoi("${line_width}");
          const float inset = line_w / 2.0;
          const float container_h = (atoi("${grid_row_graph_fr}") / total_fr) * (scr_h - 2 * status_h);
          const float graph_h = container_h - line_w;

          for (int i = 0; i < 9; ++i) {
            if (max_p == min_p) {
              id(nordpool_points_y)[i] = (int)(container_height / 2.0);
            } else {
              float y_coord = graph_height - ((prices[i] - min_p) / (max_p - min_p) * graph_height);
              id(nordpool_points_y)[i] = (int)round(inset + y_coord);
            }
          }
          // ADD THIS LINE FOR DEBUGGING
          ESP_LOGD("update_chart", "Calculated Y-Points: %d, %d, %d, %d, %d, %d, %d, %d, %d",
                id(nordpool_points_y)[0], id(nordpool_points_y)[1], id(nordpool_points_y)[2],
                id(nordpool_points_y)[3], id(nordpool_points_y)[4], id(nordpool_points_y)[5],
                id(nordpool_points_y)[6], id(nordpool_points_y)[7], id(nordpool_points_y)[8]);
      - delay: 1s
      - lvgl.line.update:
          # STEP 2: Redraw the line using the new values from the global arrays.
          id: lvgl_nordpool_line
          points:
            - x: !lambda return id(nordpool_points_x)[0];
              y: !lambda return id(nordpool_points_y)[0];
            - x: !lambda return id(nordpool_points_x)[1];
              y: !lambda return id(nordpool_points_y)[1];
            - x: !lambda return id(nordpool_points_x)[2];
              y: !lambda return id(nordpool_points_y)[2];
            - x: !lambda return id(nordpool_points_x)[3];
              y: !lambda return id(nordpool_points_y)[3];
            - x: !lambda return id(nordpool_points_x)[4];
              y: !lambda return id(nordpool_points_y)[4];
            - x: !lambda return id(nordpool_points_x)[5];
              y: !lambda return id(nordpool_points_y)[5];
            - x: !lambda return id(nordpool_points_x)[6];
              y: !lambda return id(nordpool_points_y)[6];
            - x: !lambda return id(nordpool_points_x)[7];
              y: !lambda return id(nordpool_points_y)[7];
            - x: !lambda return id(nordpool_points_x)[8];
              y: !lambda return id(nordpool_points_y)[8];