# Screen size: 240x320
lvgl:
  pages:
    - id: page_nordpool
      # Pad navigation bar and status bar
      pad_top: 34
      pad_bottom: 34
      widgets:
        - obj:
            pad_all: 1
            height: 100%
            width: 100%
            # Object area 240x252
            align: CENTER
            layout:
              type: GRID
              # Grid definition for the page layout
              grid_columns: [FR(1), FR(1), FR(1), FR(1), FR(1), FR(1), FR(1), FR(1), FR(1)]
              grid_rows: [ FR(18), FR(136), FR(14) ] # Graph container is the middle row (136)
            widgets:
              - label: # Current electricity price
                  grid_cell_column_pos: 0
                  grid_cell_row_pos: 0
                  grid_cell_x_align: START
                  grid_cell_y_align: CENTER
                  id: lbl_nordpool_price_0
                  text: "???"
                  text_font: font_md
                  color: c_text_p
                  align: left
                  text_align: left
              - label: # Current hour of the day
                  grid_cell_column_pos: 0
                  grid_cell_row_pos: 2
                  grid_cell_x_align: START
                  grid_cell_y_align: CENTER
                  id: lbl_nordpool_time_0
                  text: "??:??"
                  text_font: font_sm
                  color: c_text_s
                  align: left
                  text_align: left

              - label: # Electricity price 5 hours from now
                  id: lbl_nordpool_price_4
                  text: "???"
                  grid_cell_column_pos: 4
                  grid_cell_row_pos: 0
                  grid_cell_x_align: CENTER
                  grid_cell_y_align: CENTER
                  text_font: font_md
                  text_color: c_text_p
                  align: CENTER
                  text_align: CENTER
              - label:  # Hour of the day 5 hours from now
                  id: lbl_nordpool_time_4
                  text: "??:??"
                  grid_cell_column_pos: 4
                  grid_cell_row_pos: 2
                  grid_cell_x_align: CENTER
                  grid_cell_y_align: CENTER
                  text_font: font_sm
                  text_color: c_text_s
                  align: CENTER
                  text_align: CENTER

              - label: # Electricity price 9 hours from now
                  id: lbl_nordpool_price_8
                  text: "???"
                  grid_cell_column_pos: 8
                  grid_cell_row_pos: 0
                  grid_cell_x_align: END
                  grid_cell_y_align: CENTER
                  text_font: font_md
                  text_color: c_text_p
                  align: RIGHT
                  text_align: RIGHT
              - label:  # Hour of the day 9 hours from now
                  id: lbl_nordpool_time_8
                  text: "??:??"
                  grid_cell_column_pos: 8
                  grid_cell_row_pos: 2
                  grid_cell_x_align: END
                  grid_cell_y_align: CENTER
                  text_font: font_sm
                  text_color: c_text_s
                  align: RIGHT
                  text_align: RIGHT

              - obj: # graph container
                  grid_cell_column_pos: 0
                  grid_cell_row_pos: 1
                  grid_cell_column_span: 9
                  grid_cell_x_align: CENTER
                  grid_cell_y_align: CENTER
                  height: 100% # This will be 204px based on grid layout
                  width: 100%  # This will be 240px
                  align: CENTER
                  widgets:
                    - line:
                        id: lvgl_nordpool_line
                        line_width: 4
                        line_color: c_green
                        line_rounded: true
                        points:
                          # Initial points, will be updated by sensors.
                          - x: 0
                            y: 102
                          - x: 239
                            y: 102

sensor:
  # Get values from home assistant
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price0
    id: nordpool_price_0
    on_value:
      # Update label with rounded value
      - lvgl.label.update:
          id: lbl_nordpool_price_0
          text:
            format: "%.0f"
            args: [ 'x' ]
      # The line update is now handled centrally by the 'nordpool_price_max' sensor
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price1
    id: nordpool_price_1
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price2
    id: nordpool_price_2
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price3
    id: nordpool_price_3
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price4
    id: nordpool_price_4
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_price_4
          text:
            format: "%.0f"
            args: [ 'x' ]
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price5
    id: nordpool_price_5
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price6
    id: nordpool_price_6
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price7
    id: nordpool_price_7
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price8
    id: nordpool_price_8
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_price_8
          text:
            format: "%.0f"
            args: [ 'x' ]

  - platform: combination
    id: nordpool_price_min
    type: min
    sources:
      - source: nordpool_price_0
      - source: nordpool_price_1
      - source: nordpool_price_2
      - source: nordpool_price_3
      - source: nordpool_price_4
      - source: nordpool_price_5
      - source: nordpool_price_6
      - source: nordpool_price_7
      - source: nordpool_price_8

  - platform: combination
    id: nordpool_price_max
    type: max
    sources:
      - source: nordpool_price_0
      - source: nordpool_price_1
      - source: nordpool_price_2
      - source: nordpool_price_3
      - source: nordpool_price_4
      - source: nordpool_price_5
      - source: nordpool_price_6
      - source: nordpool_price_7
      - source: nordpool_price_8
    on_value:
      - script.execute: update_price_chart

text_sensor:
  # Strings from Home Assistant
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time0
    id: nordpool_time_0
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_time_0
          text: !lambda return id(nordpool_time_0).state;
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time4
    id: nordpool_time_4
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_time_4
          text: !lambda return id(nordpool_time_4).state;
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time8
    id: nordpool_time_8
    on_value:
      - lvgl.label.update:
          id: lbl_nordpool_time_8
          text: !lambda return id(nordpool_time_8).state;

script:
  - id: update_price_chart
    mode: single
    then:
      - lambda: |-
          const int num_points = 9;
          lv_point_t points[num_points];
          float prices[num_points];

          // Place all sensor values into a C++ array for easier processing
          prices[0] = id(nordpool_price_0).state;
          prices[1] = id(nordpool_price_1).state;
          prices[2] = id(nordpool_price_2).state;
          prices[3] = id(nordpool_price_3).state;
          prices[4] = id(nordpool_price_4).state;
          prices[5] = id(nordpool_price_5).state;
          prices[6] = id(nordpool_price_6).state;
          prices[7] = id(nordpool_price_7).state;
          prices[8] = id(nordpool_price_8).state;

          float min_p = id(nordpool_price_min).state;
          float max_p = id(nordpool_price_max).state;

          // Before proceeding, check that all sensor values are valid numbers
          if (isnan(min_p) || isnan(max_p)) {
            return; // Exit if min/max aren't ready
          }
          for (int i = 0; i < num_points; ++i) {
            if (isnan(prices[i])) {
              return; // Exit if any price is not ready
            }
          }

          // Define container size and line width to calculate a "safe area"
          const float line_w = 4.0;
          const float inset = line_w / 2.0; // Inset by half the line width
          
          const float container_width = 318.0;
          const float container_height = 136.0;

          // The graph will be drawn in an area inset by the line width
          const float graph_width = container_width - line_w;
          const float graph_height = container_height - line_w;
          
          for (int i = 0; i < num_points; ++i) {
            // Calculate X, scaling to the safe graph_width and adding the inset
            float x_coord = round(i * (graph_width - 1) / (num_points - 1));
            // Ensure the final X value is explicitly rounded and cast to an integer type.
            points[i].x = (lv_coord_t)round(inset + x_coord);

            // Calculate Y, scaling to the safe graph_height, inverting, and adding the inset
            if (max_p == min_p) {
              points[i].y = (lv_coord_t)(container_height / 2.0);
            } else {
              float y_coord = graph_height - ((prices[i] - min_p) / (max_p - min_p) * graph_height);
              points[i].y = (lv_coord_t)round(-1 * (inset + y_coord));
            }
          }

          auto* line = id(lvgl_nordpool_line);
          lv_line_set_points(line->obj, points, num_points);