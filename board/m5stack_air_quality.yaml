---
# https://docs.m5stack.com/en/core/AirQ
# https://devices.esphome.io/devices/M5Stack-AirQ
# Base functions for:
# M5Stack PM2.5 Air Quality
#

# Pins for this model
packages:
  pins: !include pins/m5stack_air_quality.yaml
  epaper: !include module/epaper.yaml

esphome:
  platformio_options:
    board_build.mcu: esp32s3
    board_build.name: "M5Stack StampS3"
    board_build.upload.flash_size: 8MB
    board_build.upload.maximum_size: 8388608
    board_build.vendor: M5Stack

i2c:
  # Internal
  - id: i2c_internal
    sda: $i2c_int_sda_pin
    scl: $i2c_int_scl_pin
    frequency: 400kHz
    scan: true

spi:
  clk_pin: $spi_clk_pin
  mosi_pin: $spi_mosi_pin

output:
  - platform: gpio
    id: sen55_enable
    pin: $sen55_pwr_pin
  - platform: ledc
    id: buzzer
    pin: $buzzer_pin

light:
  - platform: esp32_rmt_led_strip
    id: led_light
    rgb_order: GRB
    pin: $led_pin
    num_leds: 1
    rmt_channel: 0
    chipset: SK6812
    name: "LED"
    restore_mode: RESTORE_AND_ON

binary_sensor:
  - platform: gpio
    id: button_a
    name: "Button A"
    pin:
      number: $button_a_pin
      ignore_strapping_warning: true
      mode:
        input: true
      inverted: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log: Button A Pressed
        - script.execute: buzzer_beep
        - component.update: display_eink
    on_release:
      then:
        - output.turn_off: buzzer

  - platform: gpio
    id: button_b
    name: "Button B"
    pin:
      number: GPIO08
#      ignore_strapping_warning: true
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log: Button B Pressed

  - platform: gpio
    id: button_hold
    name: Button Hold
    pin:
      number: $pwr_mos_pin
      ignore_strapping_warning: true
    on_press:
      then:
        - logger.log: Button Hold Pressed

  - platform: gpio
    id: button_pwr
    name: Button Power
    pin:
      number: $button_pwr_pin
#      ignore_strapping_warning: true
    on_press:
      then:
        - logger.log: Button Power Pressed

button:
  - platform: template
    name: "CO2 Force Manual Calibration"
    entity_category: "config"
    on_press:
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda 'return id(co2_cal).state;'

  - platform: template
    name: "SEN55 Force Manual Clean"
    entity_category: "config"
    on_press:
      then:
        - sen5x.start_fan_autoclean: sen55

number:
  - platform: template
    name: "CO2 Calibration Value"
    optimistic: true
    min_value: 400
    max_value: 1000
    step: 5
    id: co2_cal
    icon: "mdi:molecule-co2"
    entity_category: "config"

script:
  # Script for buzzer beep
  - id: buzzer_on
    then:
      - output.turn_on: buzzer
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "500Hz"
      - output.set_level:
          id: buzzer
          level: "1%"
  - id: buzzer_beep
    then:
      - output.turn_on: buzzer
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "500Hz"
      - output.set_level:
          id: buzzer
          level: "1%"
      - delay: 50ms
      - output.turn_off: buzzer

  # Script for updating screen - Refresh display and publish refresh count and time.
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - component.update: display_eink
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(time_homeassistant).now().timestamp);'

# display:
#   - platform: waveshare_epaper
#     id: display_eink
#     model: 1.54inv2
#     cs_pin: $disp_cs_pin
#     dc_pin: $disp_dc_pin
#     reset_pin: $disp_rst_pin
#     busy_pin:
#       number: $disp_busy_pin
#       inverted: false
#     full_update_every: 6
#     reset_duration: 2ms
#     update_interval: 10s
#     lambda: |-
#       auto now = id(sntp_time).now().strftime("%I:%M%p %m/%d/%y").c_str();
#       it.printf(it.get_width()/2, 0, id(f16), TextAlign::TOP_CENTER, "${location} @ %s", now);

#       it.print(0, 23, id(f24), TextAlign::TOP_LEFT, "PM 1: ");
#       it.print(0, 48, id(f24), TextAlign::TOP_LEFT, "PM 2.5: ");
#       it.print(0, 73, id(f24), TextAlign::TOP_LEFT, "PM 4: ");
#       it.print(0, 98, id(f24), TextAlign::TOP_LEFT, "PM 10: ");
#       it.print(0, 123, id(f24), TextAlign::TOP_LEFT, "CO2: ");
#       it.print(0, 148, id(f24), TextAlign::TOP_LEFT, "VOC: ");
#       it.print(0, 173, id(f24), TextAlign::TOP_LEFT, "NOx: ");

#       it.printf(it.get_width() - 50, 23, id(f24), TextAlign::TOP_RIGHT, "%.1f", id(PM1_0).state);
#       it.print(it.get_width(), 23, id(f18), TextAlign::TOP_RIGHT, "µg/m³");

#       it.printf(it.get_width() - 50, 48, id(f24), TextAlign::TOP_RIGHT, "%.1f", id(PM2_5).state);
#       it.print(it.get_width(), 48, id(f18), TextAlign::TOP_RIGHT, "µg/m³");

#       it.printf(it.get_width() - 50, 73, id(f24), TextAlign::TOP_RIGHT, "%.1f", id(PM4_0).state);
#       it.print(it.get_width(), 73, id(f18), TextAlign::TOP_RIGHT, "µg/m³");

#       it.printf(it.get_width() - 50, 98, id(f24), TextAlign::TOP_RIGHT, "%.1f", id(PM10_0).state);
#       it.print(it.get_width(), 98, id(f18), TextAlign::TOP_RIGHT, "µg/m³");

#       it.printf(it.get_width() - 50, 123, id(f24), TextAlign::TOP_RIGHT, "%.0f", id(CO2).state);
#       it.print(it.get_width(), 123, id(f18), TextAlign::TOP_RIGHT, "ppm");

#       it.printf(it.get_width() - 50, 148, id(f24), TextAlign::TOP_RIGHT, "%.0f", id(voc).state);
#       it.print(it.get_width(), 148, id(f18), TextAlign::TOP_RIGHT, "ppb");

#       it.printf(it.get_width() - 50, 173, id(f24), TextAlign::TOP_RIGHT, "%.0f", id(nox).state);
#       it.print(it.get_width(), 173, id(f18), TextAlign::TOP_RIGHT, "ppb");

sensor:
  - platform: scd4x
    id: scd40_sensor
    co2:
      id: co2_scd40
      name: "CO2"
      device_class: "carbon_dioxide"
      filters:
        - or:
          - heartbeat: 900s
          - delta: 0.15
    temperature:
      id: temperature_scd40
      name: "Temperature SCD40"
      disabled_by_default: true
      device_class: "temperature"
    humidity:
      id: humidity_scd40
      name: "Humidity SCD40"
      disabled_by_default: true
      device_class: "humidity"
    altitude_compensation: 145
#    ambient_pressure_compensation_source:
    address: 0x62
    update_interval: 30s

  - platform: sen5x
    id: sen55_sensor
    pm_1_0:
      id: pm1_0
      name: "PM 1"
      device_class: "pm1"
    pm_2_5:
      id: pm2_5
      name: "PM 2.5"
      device_class: "pm25"
    pm_4_0:
      id: pm4_0
      name: "PM 4"
    pm_10_0:
      id: pm10_0
      name: "PM 10"
      device_class: "pm10"
    temperature:
      id: temperature_sen55
      name: "Temperature SEN55"
      disabled_by_default: true
      device_class: "temperature"
    humidity:
      id: humidity_sen55
      name: "Humidity SEN55"
      disabled_by_default: true
      device_class: "humidity"
    voc:
      id: voc
      name: VOC
    nox:
      id: nox
      name: "NOX"
    address: 0x69
    update_interval: 30s

