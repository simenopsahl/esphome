---
# https://docs.m5stack.com/en/core/AirQ
# https://devices.esphome.io/devices/M5Stack-AirQ
# Base functions for:
# M5Stack PM2.5 Air Quality
#

substitutions:
  time_timezone: "Europe/Oslo"

# Pins for this model
packages:
  pins: !include pins/m5stack_air_quality.yaml
  epaper: !include module/epaper.yaml

esphome:
  project:
    name: "M5Stack.Air Quality"
  on_boot:
    - priority: 800
      then:
        - output.turn_on: sen55_enable
        - pcf8563.read_time

esp32:
  board: m5stack-stamps3
  variant: esp32s3

wifi:
  enable_btm: true
  enable_rrm: true

spi:
  clk_pin: $spi_clk_pin
  mosi_pin: $spi_mosi_pin

time:
  - platform: pcf8563
    i2c_id: i2c_internal
    address: 0x51
    update_interval: 10min
  - platform: sntp
    id: sntp_time
    timezone: $time_timezone
    on_time_sync:
      then:
        pcf8563.write_time:

output:
  - platform: gpio
    id: sen55_enable
    pin: $sen55_pwr_pin
  - platform: gpio
    id: power_hold
    pin:
      number: $pwr_mos_pin
      allow_other_uses: true
  - platform: ledc
    id: buzzer
    pin: $buzzer_pin

light:
  - platform: esp32_rmt_led_strip
    id: rgb_led
    rgb_order: GRB
    pin: $rgb_pin
    num_leds: 1
#    rmt_channel: 0 # Not for ESP-IDF
    rmt_symbols: 384
    chipset: SK6812
    effects:
      - pulse:
      - strobe:
      - strobe:
          name: "Slow Blink" # 500ms on, 2000ms off
          colors:
            - state: true
              brightness: 25%
              red: 100%
              green: 0%
              blue: 0%
              duration: 500ms
              transition_length: 500ms
            - state: false
              duration: 2000ms
              transition_length: 1000ms
    default_transition_length: 100ms
    initial_state:
      state: true
      brightness: 50%
      color_brightness: 100%
      red: 100%
      green: 0%
      blue: 0%
    name: "LED"
    entity_category: config

binary_sensor:
  - platform: gpio
    id: button_a
    name: "Button A"
    entity_category: diagnostic
    pin:
      number: $button_a_pin
      ignore_strapping_warning: true
      mode:
        input: true
      inverted: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log: Button A Pressed
        - script.execute: buzzer_beep
        - script.execute: update_screen
    on_release:
      then:
        - output.turn_off: buzzer

  - platform: gpio
    id: button_b
    name: "Button B"
    entity_category: diagnostic
    pin:
      number: GPIO08
#      ignore_strapping_warning: true
      mode:
        input: true
        pullup: true
      inverted: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log: Button B Pressed
        - script.execute: buzzer_beep
        - display.page.show_next: display_eink
        - script.execute: update_screen
    on_release:
      then:
        - output.turn_off: buzzer

  - platform: gpio
    id: button_pwr
    name: Button Power
    entity_category: diagnostic
    pin:
      number: $button_pwr_pin
#      ignore_strapping_warning: true
      inverted: true
    on_press:
      then:
        - logger.log: Button Power Pressed
        - script.execute: buzzer_beep
        - output.turn_on: power_hold
        - script.execute: led_wifi
        - script.wait: led_wifi
        - delay: 1000ms
        - script.execute: led_homeassistant
        - script.wait: led_homeassistant
        - delay: 1000ms
        - script.execute: led_default_state
    on_release:
      then:
        - output.turn_off: buzzer
    on_click:
      min_length: 1000ms
      max_length: 5000ms
      then:
        - logger.log: Button Power Held
        - output.turn_off: power_hold

  - platform: gpio
    id: pwr_hold
    name: Power Hold
    entity_category: diagnostic
    pin:
      number: $pwr_mos_pin
      allow_other_uses: true
      ignore_strapping_warning: true
      inverted: true
    on_press:
      then:
        - logger.log: Power Hold On
    on_release:
      then:
        - logger.log: Power Hold Off

button:
  - platform: template
    name: "CO2 Force Manual Calibration"
    entity_category: "config"
    on_press:
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda 'return id(co2_cal).state;'

  - platform: template
    name: "SEN55 Force Manual Clean"
    entity_category: "config"
    on_press:
      then:
        - sen5x.start_fan_autoclean: sen55_sensor

number:
  - platform: template
    name: "CO2 Calibration Value"
    optimistic: true
    min_value: 400
    max_value: 1000
    step: 5
    id: co2_cal
    icon: "mdi:molecule-co2"
    entity_category: "config"

script:
  # Script for buzzer beep
  - id: buzzer_on
    then:
      - output.turn_on: buzzer
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "500Hz"
      - output.set_level:
          id: buzzer
          level: "1%"
  - id: buzzer_beep
    then:
      - output.turn_on: buzzer
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "500Hz"
      - output.set_level:
          id: buzzer
          level: "1%"
      - delay: 50ms
      - output.turn_off: buzzer

# Script for status LED
  - id: led_wifi
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - light.turn_on:
                id: rgb_led
                brightness: 30%
                red: 0%
                green: 100%
                blue: 0%
            - delay: 400ms
            - light.turn_off:
                id: rgb_led
            - delay: 200ms
            - light.turn_on:
                id: rgb_led
                brightness: 30%
                red: 0%
                green: 100%
                blue: 0%
            - delay: 400ms
          else:
            - light.turn_off:
                id: rgb_led
  - id: led_homeassistant
    then:
      - if:
          condition:
            api.connected:
          then:
            - light.turn_on:
                id: rgb_led
                brightness: 30%
                red: 0%
                green: 10%
                blue: 100%
            - delay: 400ms
            - light.turn_off:
                id: rgb_led
            - delay: 200ms
            - light.turn_on:
                id: rgb_led
                brightness: 30%
                red: 0%
                green: 10%
                blue: 100%
            - delay: 400ms
          else:
            - light.turn_off:
                id: rgb_led
  - id: led_default_state
    then:
      - light.turn_on:
          id: rgb_led
          brightness: 25%
          red: 100%
          green: 0%
          blue: 0%
      - delay: 200ms
      - light.turn_on:
          id: rgb_led
          effect: "Slow Blink"

# display:
#   - platform: waveshare_epaper
#     id: display_eink
#     model: 1.54inv2
#     cs_pin: $disp_cs_pin
#     dc_pin: $disp_dc_pin
#     reset_pin: $disp_rst_pin
#     busy_pin:
#       number: $disp_busy_pin
#       inverted: false
#     full_update_every: 6
#     reset_duration: 2ms
#     update_interval: never
#     lambda: |-
#       auto now = id(sntp_time).now().strftime("%I:%M%p %m/%d/%y").c_str();
#       it.printf(it.get_width()/2, 0, id(f16), TextAlign::TOP_CENTER, "${location} @ %s", now);

#       it.print(0, 23, id(f24), TextAlign::TOP_LEFT, "PM 1: ");
#       it.print(0, 48, id(f24), TextAlign::TOP_LEFT, "PM 2.5: ");
#       it.print(0, 73, id(f24), TextAlign::TOP_LEFT, "PM 4: ");
#       it.print(0, 98, id(f24), TextAlign::TOP_LEFT, "PM 10: ");
#       it.print(0, 123, id(f24), TextAlign::TOP_LEFT, "CO2: ");
#       it.print(0, 148, id(f24), TextAlign::TOP_LEFT, "VOC: ");
#       it.print(0, 173, id(f24), TextAlign::TOP_LEFT, "NOx: ");

#       it.printf(it.get_width() - 50, 23, id(f24), TextAlign::TOP_RIGHT, "%.1f", id(PM1_0).state);
#       it.print(it.get_width(), 23, id(f18), TextAlign::TOP_RIGHT, "µg/m³");

#       it.printf(it.get_width() - 50, 48, id(f24), TextAlign::TOP_RIGHT, "%.1f", id(PM2_5).state);
#       it.print(it.get_width(), 48, id(f18), TextAlign::TOP_RIGHT, "µg/m³");

#       it.printf(it.get_width() - 50, 73, id(f24), TextAlign::TOP_RIGHT, "%.1f", id(PM4_0).state);
#       it.print(it.get_width(), 73, id(f18), TextAlign::TOP_RIGHT, "µg/m³");

#       it.printf(it.get_width() - 50, 98, id(f24), TextAlign::TOP_RIGHT, "%.1f", id(PM10_0).state);
#       it.print(it.get_width(), 98, id(f18), TextAlign::TOP_RIGHT, "µg/m³");

#       it.printf(it.get_width() - 50, 123, id(f24), TextAlign::TOP_RIGHT, "%.0f", id(CO2).state);
#       it.print(it.get_width(), 123, id(f18), TextAlign::TOP_RIGHT, "ppm");

#       it.printf(it.get_width() - 50, 148, id(f24), TextAlign::TOP_RIGHT, "%.0f", id(voc).state);
#       it.print(it.get_width(), 148, id(f18), TextAlign::TOP_RIGHT, "ppb");

#       it.printf(it.get_width() - 50, 173, id(f24), TextAlign::TOP_RIGHT, "%.0f", id(nox).state);
#       it.print(it.get_width(), 173, id(f18), TextAlign::TOP_RIGHT, "ppb");

sensor:
  - platform: scd4x
    id: aq_scd40_sensor
    i2c_id: i2c_internal
    co2:
      id: co2_scd40_aq
      name: "AirQuality SCD40 CO2"
      device_class: "carbon_dioxide"
      filters:
        - sliding_window_moving_average:
            window_size: 6
            send_every: 6
    temperature:
      id: temperature_scd40_aq
      name: "AirQuality SCD40 Temperature"
      disabled_by_default: true
      device_class: "temperature"
      filters:
        - sliding_window_moving_average:
            window_size: 12
            send_every: 6
    humidity:
      id: humidity_scd40_aq
      name: "AirQuality SCD40 Humidity"
      disabled_by_default: true
      device_class: "humidity"
      filters:
        - sliding_window_moving_average:
            window_size: 12
            send_every: 6
    altitude_compensation: 145m
#    ambient_pressure_compensation_source:
    address: 0x62
    update_interval: 5s

  - platform: sen5x
    id: sen55_sensor
    i2c_id: i2c_internal
    pm_1_0:
      id: pm1_0_sen55
      name: "PM 1"
      device_class: "pm1"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 2
    pm_2_5:
      id: pm2_5_sen55
      name: "PM 2.5"
      device_class: "pm25"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 2
    pm_4_0:
      id: pm4_0_sen55
      name: "PM 4"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 2
    pm_10_0:
      id: pm10_0_sen55
      name: "PM 10"
      device_class: "pm10"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 2
    temperature:
      id: temperature_sen55
      name: "Temperature SEN55"
      disabled_by_default: true
      device_class: "temperature"
      filters:
        - sliding_window_moving_average:
            window_size: 6
            send_every: 3
    humidity:
      id: humidity_sen55
      name: "Humidity SEN55"
      disabled_by_default: true
      device_class: "humidity"
      filters:
        - sliding_window_moving_average:
            window_size: 6
            send_every: 2
    voc:
      id: voc_sen55
      name: VOC
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 2
    nox:
      id: nox_sen55
      name: "NOX"
      filters:
        - sliding_window_moving_average:
            window_size: 3
            send_every: 2
    auto_cleaning_interval: 48h
    address: 0x69
    update_interval: 10s

# Doens't support ADC on pin14 when WIFI is configured
  # Battery voltage
#  - platform: adc
#    pin: $bat_feedback
#    id: bat_adc
#    update_interval: 10s
#    samples: 10
#    accuracy_decimals: 3
#    filters:
#      - multiply: 4.25
#      - median:
#          window_size: 7
#          send_every: 7
#          send_first_at: 7
#    name: "Battery Voltage"
#    entity_category: diagnostic
#    device_class: voltage
#    unit_of_measurement: V
#    on_value:
#      then:
#        - component.update: bat_percent
  # Battery Percent
#  - platform: template
#    name: "Battery"
#    id: bat_percent
#    lambda: return id(bat_adc).state;
#    accuracy_decimals: 0
#    filters:
#      - calibrate_linear:
#          method: exact
#          datapoints:
#            - 0.00 -> 0.0
#            - 3.00 -> 1.0
#            - 3.10 -> 10.0
#            - 3.20 -> 50.0
#            - 3.55 -> 85.0
#            - 3.685 -> 100.0
#      - lambda: |-
#          if (x <= 100) {
#            return x;
#          } else {
#            return 100;
#          }
#          if (x <0) {
#            return 0;
#          }
#    entity_category: diagnostic
#    device_class: battery
#    unit_of_measurement: "%"