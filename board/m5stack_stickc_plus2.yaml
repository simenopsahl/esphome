---
# https://docs.m5stack.com/en/core/M5StickC%20PLUS2
# https://devices.esphome.io/devices/M5Stack-M5StickC-PLUS2
# Base functions for:
# M5Stack StickC Plus2
#

# HAT and Mic shared pins
substitutions:
  hat_shared: "false"

# Pins for this model
packages:
  pins: !include pins/m5stack_stickc_plus2.yaml

esp32:
  board: m5stick-c
  flash_size: 8MB

esphome:
  project:
    name: "M5Stack.StickC-Plus2"
  platformio_options:
#    board_build.arduino.partitions: default_8MB.csv
#    board_build.f_flash: 80000000L
    build_flags:
      - "-w" # https://docs.platformio.org/en/latest/projectconf/sections/env/options/build/build_flags.html
      - "-DBOARD_HAS_PSRAM"
      - "-DARDUINO_USB_CDC_ON_BOOT=1"
      - "-mfix-esp32-psram-cache-issue"
psram:
  mode: octal
  speed: 80MHz

i2c:
# Internal
  - id: i2c_internal
    sda: $i2c_int_sda_pin
    scl: $i2c_int_scl_pin
    frequency: 400kHz
    scan: true

spi:
  clk_pin: $spi_clk_pin
  mosi_pin: $spi_mosi_pin

light:
  # Enable status LED
  - platform: status_led
    id: status_light
    pin: $led_pin
  # TFT Backlight
  - platform: monochromatic
    output:  backlight_output
    id: backlight_light
    default_transition_length: 100ms
    restore_mode: ALWAYS_ON
    initial_state:
      state: on
      brightness: 25%
    name: "Backlight"
    entity_category: config

output:
  # Buzzer
  - platform: ledc
    id: buzzer
    pin: $buzzer_pin
  # TFT Backlight
  - platform: ledc
    id: backlight_output
    pin: $disp_bl_pin
    frequency: 256Hz
    channel: 7
    min_power: 15%
    zero_means_zero: true

# 1.14 inch, 135*240 Colorful TFT LCD, ST7789v2
#display:
#  - platform:  ili9xxx
#    model: st7789v
#    id: display_lcd
#    cs_pin: $disp_cs_pin
#    dc_pin: $disp_dc_pin
#    reset_pin: $disp_reset_pin
#    invert_colors: true
#    update_interval: 1s
#    dimensions:
#      height: 240
#      width: 135
#      offset_height: 40
#      offset_width: 62
    # Rotate 270 swap dimensions
    #transform:
      #swap_xy: true
      #mirror_y: true
#    lambda: |-
#      it.print(it.get_width()/2, 0, id(roboto), id(my_white), TextAlign::TOP_CENTER, "M5Stick Test");

binary_sensor:
  # Side Button
  - platform: gpio
    id: button_side
    name: Side Button
    entity_category: diagnostic
    pin:
      number: $button_side_pin
      inverted: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log: Side Button Pressed
        - script.execute: buzzer_beep
        - display.page.show: page_local
    on_release:
      then:
        - output.turn_off: buzzer
  # Front Button
  - platform: gpio
    id: button_front
    name: Front Button
    entity_category: diagnostic
    pin:
      number: $button_front_pin
      inverted: true
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        - logger.log: Front Button Pressed
        - script.execute: buzzer_beep
        - display.page.show_next: display_lcd
    on_release:
      then:
        - output.turn_off: buzzer

# Script for buzzer beep
script:
  - id: buzzer_on
    then:
      - output.turn_on: buzzer
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "500Hz"
      - output.set_level:
          id: buzzer
          level: "1%"
  - id: buzzer_beep
    then:
      - output.turn_on: buzzer
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "500Hz"
      - output.set_level:
          id: buzzer
          level: "1%"
      - delay: 50ms
      - output.turn_off: buzzer

sensor:
  # Battery voltage
  - platform: adc
    pin: $bat_feedback
    id: bat_adc
    update_interval: 10s
    attenuation: 12db
    samples: 10
    accuracy_decimals: 3
    filters:
      - multiply: 2.0
      - median:
          window_size: 7
          send_every: 7
          send_first_at: 7
    name: "Battery Voltage"
    entity_category: diagnostic
    device_class: voltage
    unit_of_measurement: V
    on_value:
      then:
        - component.update: bat_percent
  # Battery Percent
  - platform: template
    name: "Battery"
    id: bat_percent
    lambda: return id(bat_adc).state;
    accuracy_decimals: 0
    filters:
      - calibrate_linear:
          method: exact
          datapoints:
            - 0.00 -> 0.0
            - 3.3 -> 1.0
            - 3.39 -> 10.0
            - 3.75 -> 50.0
            - 4.11 -> 90.0
            - 4.2 -> 100.0
      - lambda: |-
          if (x <= 100) {
            return x;
          } else {
            return 100;
          }
          if (x <0) {
            return 0;
          }
    entity_category: diagnostic
    device_class: battery
    unit_of_measurement: "%"

  # Built-in 6-axis (IMU) that also includes a temperature sensor
  - platform: mpu6886
    i2c_id: i2c_internal
    address: 0x68
    update_interval: 10s
    accel_x:
      id: mpu6886_accel_x
      name: "Accel X"
      disabled_by_default: true
    accel_y:
      id: mpu6886_accel_y
      name: "Accel Y"
      disabled_by_default: true
    accel_z:
      id: mpu6886_accel_z
      name: "Accel Z"
      disabled_by_default: true
    gyro_x:
      id: mpu6886_gyro_x
      name: "Gyro X"
      disabled_by_default: true
    gyro_y:
      id: mpu6886_gyro_y
      name: "Gyro Y"
      disabled_by_default: true
    gyro_z:
      id: mpu6886_gyro_z
      name: "Gyro Z"
      disabled_by_default: true
    temperature:
      id: temperature_mpu6886
      name: "Temperature MPU6886"
      disabled_by_default: true

#switch:
  # Power MOS battery bypass
#  - platform: gpio
#    id: power_mos
#    name: "Power MOS"
#    entity_category: config
#    pin:
#      number: $power_mos_pin
#      allow_other_uses: true
color:
  - id: c_red
    red: 100%
    green: 0%
    blue: 0%
  - id: c_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: c_green
    red: 0%
    green: 100%
    blue: 0%
  - id: c_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: c_gray
    red: 50%
    green: 50%
    blue: 50%
  - id: c_white
    red: 100%
    green: 100%
    blue: 100%

# Audio not tested
#i2s_audio:
#  id: i2s_bus
#  i2s_lrclk_pin:
#    number: $i2s_lrclk_pin
#    allow_other_uses: $hat_shared
#  i2s_bclk_pin:
#    number: $i2s_bclk_pin
#    allow_other_uses: $hat_shared

#microphone:
#  - platform: i2s_audio
#    i2s_din_pin: $mic_pin
#    i2s_audio_id: i2s_bus
#    adc_type: external
#    pdm: true
#    id: mic