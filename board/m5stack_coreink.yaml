---
# https://docs.m5stack.com/en/core/coreink
# https://www.reddit.com/r/Esphome/comments/1hznwxf/esphome_with_m5_coreink/
# Base functions for:
# M5Stack CoreInk
#

substitutions:
  time_timezone: "Europe/Oslo"
  home_page: page_content
  device:
    framework:
      type: esp-idf

# Pins for this model
packages:
  pins: !include pins/m5stack_coreink.yaml
  epaper: !include module/epaper.yaml

esphome:
  project:
    name: "M5Stack.CoreInk"
# i2c RTC only with one additional i2c bus
#  on_boot:
#    - priority: 800
#      then:
#        - pcf8563.read_time
  on_boot:
    - priority: 800
      then:
        # Bypass sleep circuit arduino
#        - lambda: |-
#            pinMode(GPIO_NUM_12, OUTPUT);
#            digitalWrite(GPIO_NUM_12, HIGH);
#            gpio_hold_en(GPIO_NUM_12);
        # Bypass sleep circuit esp-idf
        - lambda: |-
            gpio_set_direction(GPIO_NUM_12, GPIO_MODE_OUTPUT);
            gpio_set_level(GPIO_NUM_12, 1);
            gpio_hold_en(GPIO_NUM_12);
            gpio_deep_sleep_hold_en();
    - priority: -100
      then:
        - component.update: display_eink
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
        # Wait a bit longer so all the items are received
        - delay: 5s
        - logger.log: "Initial sensor data received: Refreshing display..."
        - lambda: 'id(initial_data_received) = true;'
        - display.page.show: ${display.home_page}
        - script.execute: update_screen

esp32:
  board: m5stack-coreink
  framework:
    advanced:
      compiler_optimization: PERF
    type: ${device.framework.type}

wifi:
  enable_btm: true
  enable_rrm: true

spi:
  clk_pin: ${pin.int.spi.clk}
  mosi_pin: ${pin.int.spi.mosi}

# i2c RTC only with one additional i2c bus
#time:
#  - platform: pcf8563
#    i2c_id: i2c_internal
#    address: 0x51
#    update_interval: 10min
#  - platform: sntp
#    id: sntp_time
#    timezone: ${time_timezone}
#    on_time_sync:
#      then:
#        pcf8563.write_time:

light:
  # Enable status LED
  - platform: status_led
    id: status_light
    pin: ${pin.light.led}

# Buzzer
output:
  - platform: ledc
    id: buzzer
    pin: ${pin.audio.buzzer}
#  - platform: gpio
#    id: power_hold
#    pin:
#      number: ${pin.int.pwr_mos}
#      allow_other_uses: true

binary_sensor:
  # Power Button
#  - platform: gpio
#    id: button_side
#    name: Side Button
#    pin:
#      number: ${pin.btn.side}
#      inverted: true
#      mode:
#        input: true
#        pullup: true
#    filters:
#      - delayed_off: 10ms
#    on_press:
#      then:
#        - logger.log: Side Button Pressed
  # Top Button
  - platform: gpio
    id: button_top
    name: Top Button
    entity_category: diagnostic
    pin:
      number: ${pin.btn.top}
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 10ms
    on_press:
      - logger.log: Top Button Pressed
      - script.execute: buzzer_beep
    on_release:
      - output.turn_off: buzzer

  # Stick Up
  - platform: gpio
    id: stick_up
    pin:
      number: ${pin.btn.stick.up}
#      allow_other_uses: true
      inverted: true
      mode:
        input: true
#        pullup: true
    filters:
      - delayed_off: 10ms
    on_press:
      - logger.log: Stick Up
      - script.execute: buzzer_beep
    on_release:
      - output.turn_off: buzzer
    name: Stick Up
    entity_category: diagnostic
  # Stick Press
  - platform: gpio
    id: stick_press
    pin:
      number: ${pin.btn.stick.press}
#      allow_other_uses: true
      inverted: true
      mode:
        input: true
#        pullup: true
    filters:
      - delayed_off: 10ms
    on_press:
      - logger.log: Stick Press
      - script.execute: buzzer_beep
    on_release:
      - output.turn_off: buzzer
    name: Stick Press
    entity_category: diagnostic
  # Stick Down
  - platform: gpio
    id: stick_down
    pin:
      number: ${pin.btn.stick.down}
#      allow_other_uses: true
      inverted: true
      mode:
        input: true
#        pullup: true
    filters:
      - delayed_off: 10ms
    on_press:
      - logger.log: Stick Down
      - script.execute: buzzer_beep
    on_release:
      - output.turn_off: buzzer
    name: Stick Down
    entity_category: diagnostic

# Power Hold
  - platform: gpio
    id: pwr_hold
    pin:
      number: ${pin.int.pwr_mos}
#      allow_other_uses: true
      ignore_strapping_warning: true
      inverted: true
    name: Power Hold
    entity_category: diagnostic

# Script for buzzer beep
script:
  - id: buzzer_on
    then:
      - output.turn_on: buzzer
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "500Hz"
      - output.set_level:
          id: buzzer
          level: "1%"
  - id: buzzer_beep
    then:
      - output.turn_on: buzzer
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "500Hz"
      - output.set_level:
          id: buzzer
          level: "1%"
      - delay: 50ms
      - output.turn_off: buzzer

sensor:
  # Deep Sleep wakeup cause
#  - platform: template
#    name: "Wakeup Cause"
#    entity_category: diagnostic
#    accuracy_decimals: 0
#    lambda: return esp_sleep_get_wakeup_cause();
  
  # Battery voltage
  - platform: adc
    pin: ${pin.int.bat_feedback}
    id: bat_adc
    update_interval: 10s
    samples: 10
    accuracy_decimals: 3
    filters:
      - multiply: 4.25
      - median:
          window_size: 7
          send_every: 7
          send_first_at: 7
    name: "Battery Voltage"
    entity_category: diagnostic
    device_class: voltage
    unit_of_measurement: V
    on_value:
      then:
        - component.update: bat_percent
  # Battery Percent
  - platform: template
    name: "Battery"
    id: bat_percent
    lambda: return id(bat_adc).state;
    accuracy_decimals: 0
    filters:
      - calibrate_linear:
          method: exact
          datapoints:
            - 0.00 -> 0.0
            - 3.00 -> 1.0
            - 3.10 -> 10.0
            - 3.20 -> 50.0
            - 3.55 -> 85.0
            - 3.685 -> 100.0
      - lambda: |-
          if (x <= 100) {
            return x;
          } else {
            return 100;
          }
          if (x <0) {
            return 0;
          }
    entity_category: diagnostic
    device_class: battery
    unit_of_measurement: "%"

#deep_sleep:
#  id: deep_sleep_battery
#  run_duration: 120s
#  sleep_duration: 180s
#  wakeup_pin_mode: KEEP_AWAKE
#  esp32_ext1_wakeup:
#    mode: ANY_HIGH
#    pins:
#      - number: ${pin.int.rtc_wakeup}
#      - number: ${pin.int.pwr_mos}
#        allow_other_uses: true
#        inverted: true
#      - number: ${pin.btn.stick.up}
#        allow_other_uses: true
#      - number: ${pin.btn.stick.press}
#        allow_other_uses: true
#      - number: ${pin.btn.stick.down}
#        allow_other_uses: true

#switch:
  # Power Hold
#  - platform: template
#    id: sw_pwr_hold
#    lambda: |-
#      if (id(pwr_hold).state) {
#        return true;
#      } else {
#        return false;
#      }
#    restore_mode: RESTORE_DEFAULT_ON
#    turn_on_action:
#      then:
#        - logger.log: Power Hold On
#        - lambda: |-
#            gpio_set_direction(GPIO_NUM_12, GPIO_MODE_OUTPUT);
#            gpio_set_level(GPIO_NUM_12, 1);
#            gpio_hold_en(GPIO_NUM_12);
#            gpio_deep_sleep_hold_en();
#        - deep_sleep.prevent: deep_sleep_battery
#    turn_off_action:
#      then:
#        - logger.log: Power Hold Off
#        - lambda: |-
#            gpio_set_direction(GPIO_NUM_12, GPIO_MODE_OUTPUT);
#            gpio_set_level(GPIO_NUM_12, 0);
#            gpio_hold_en(GPIO_NUM_12);
#            gpio_deep_sleep_hold_dis();
#        - deep_sleep.allow: deep_sleep_battery
#    name: Power Hold
#    entity_category: config
#    optimistic: true

display:
  # 200 x 200 resolution
  - platform: waveshare_epaper
    id: display_eink
    model: 1.54inv2
    cs_pin: ${pin.int.spi.disp.cs}
    dc_pin: ${pin.int.spi.disp.dc}
    reset_pin: ${pin.int.spi.disp.reset}
    busy_pin:
      number: ${pin.int.spi.disp.busy}
      inverted: false
    full_update_every: 1
#    reset_duration: 2ms
    update_interval: never
    pages:
      - id: page_black
        lambda: |-
          // Fill background.
          it.fill(id(epaper_text_color));
      - id: page_white
        lambda: |-
          // Fill background.
          it.fill(id(epaper_bg_color));

# text_sensor:
#   - platform: template
#     id: wakeup_cause
#     lambda: return to_string( esp_sleep_get_wakeup_cause() );
#     filters:
#       - lambda: |-
#           if (x == "0") {
#             return x + "_ESP_SLEEP_WAKEUP_UNDEFINED";
#           } else if (x == "1") {
#             return x + "_ESP_SLEEP_WAKEUP_ALL";
#           } else if (x == "2") {
#             return x + "_ESP_SLEEP_WAKEUP_EXT0";
#           } else if (x == "3") {
#             return x + "_ESP_SLEEP_WAKEUP_EXT1";
#           } else if (x == "4") {
#             return x + "_ESP_SLEEP_WAKEUP_TIMER";
#           } else if (x == "5") {
#             return x + "_ESP_SLEEP_WAKEUP_TOUCHPAD";
#           } else if (x == "6") {
#             return x + "_ESP_SLEEP_WAKEUP_ULP";
#           } else if (x == "7") {
#             return x + "_ESP_SLEEP_WAKEUP_GPIO";
#           } else if (x == "8") {
#             return x + "_ESP_SLEEP_WAKEUP_UART";
#           } else if (x == "9") {
#             return x + "_ESP_SLEEP_WAKEUP_WIFI";
#           } else if (x == "10") {
#             return x + "_ESP_SLEEP_WAKEUP_COCPU";
#           } else if (x == "11") {
#             return x + "_ESP_SLEEP_WAKEUP_COCPU_TRAP_TRIG";
#           } else if (x == "12") {
#             return x + "_ESP_SLEEP_WAKEUP_BT";
#           } else {
#             return x + "_UNKNOWN";
#           }
#     name: "Wakeup Cause"
#     entity_category: diagnostic
#     disabled_by_default: true