# https://community.home-assistant.io/t/use-esphome-with-e-ink-displays-to-blend-in-with-your-home-decor/435428
# https://github.com/Madelena/esphome-weatherman-dashboard
packages:
  <<: !include_dir_named common
  board: !include board/waveshare_epaper_driver.yaml

substitutions:
  devicename: waveshare-display-board
  location: "1etg, Kjøkken"

esphome:
  comment: "E-Ink Kjøkken Display"
  name: $devicename
  friendly_name: $devicename
  area: $location
  project:
    version: "1.0.0"

logger:
  initial_level: INFO

# Now render everything on the ePaper screen.
display:
  - platform: waveshare_epaper
    id: display_eink
    cs_pin: $disp_cs_pin
    dc_pin: $disp_dc_pin
    busy_pin: $disp_busy_pin
    reset_pin: $disp_reset_pin
    reset_duration: 2ms
    model: 7.50in-bV2
    update_interval: never
    rotation: 90°
    pages:
      - id: page_black
        lambda: |-
          // Fill background.
          it.fill(COLOR_ON);
      - id: page_white
        lambda: |-
          // Fill background.
          it.fill(COLOR_OFF);
      - id: page_content
        lambda: |-
          // Map weather states to MDI characters.
          std::map<std::string, std::string> weather_icon_map
            {
              {"clear-night", "\U000F0594"},
              {"cloudy", "\U000F0590"},
              {"cloudy-alert", "\U000F0F2F"},
              {"cloudy-arrow-right", "\U000F0E6E"},
              {"fog", "\U000F0591"},
              {"hail", "\U000F0592"},
              {"hazy", "\U000F0F30"},
              {"hurricane", "\U000F0898"},
              {"lightning", "\U000F0593"},
              {"lightning-rainy", "\U000F067E"},
              {"night", "\U000F0594"},
              {"night-partly-cloudy", "\U000F0F31"},
              {"partlycloudy", "\U000F0595"},
              {"partly-lightning", "\U000F0F32"},
              {"partly-rainy", "\U000F0F33"},
              {"partly-snowy", "\U000F0F34"},
              {"partly-snowy-rainy", "\U000F0F35"},
              {"pouring", "\U000F0596"},
              {"rainy", "\U000F0597"},
              {"snowy", "\U000F0598"},
              {"snowy-heavy", "\U000F0F36"},
              {"snowy-rainy", "\U000F067F"},
              {"sunny", "\U000F0599"},
              {"sunny-alert", "\U000F0F37"},
              {"sunny-off", "\U000F14E4"},
              {"sunset", "\U000F059A"},
              {"sunset-down", "\U000F059B"},
              {"sunset-up", "\U000F059C"},
              {"tornado", "\U000F0F38"},
              {"windy", "\U000F059D"},
              {"windy-variant", "\U000F059E"},
            };
          
          // Fill background.
          it.fill(COLOR_OFF);

          // Show loading screen before data is received.
          if (id(initial_data_received) == false) {
            it.printf(240, 390, id(font_large), TextAlign::TOP_CENTER, "Venter på data...");
          } else {

            // Weather Section
            // Now mid
            //it.printf(134, 0, id(font_mdi_large), TextAlign::TOP_LEFT, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
            //it.printf(234, 31, id(font_large), TextAlign::TOP_LEFT, "%2.0f°C", id(weather_temperature).state);
            // Now Measured and forecasted
            it.printf(120, 0, id(font_mdi_large), TextAlign::TOP_LEFT, "%s", weather_icon_map[id(weather_condition_now).state.c_str()].c_str());
            it.printf(220, 15, id(font_small), TextAlign::TOP_LEFT, "Målt:");
            it.printf(220, 40, id(font_large), TextAlign::TOP_LEFT, "%2.0f°C", id(weather_temperature_actual).state);
            it.printf(320, 15, id(font_small), TextAlign::TOP_LEFT, "Meldt:");
            it.printf(320, 40, id(font_large), TextAlign::TOP_LEFT, "%2.0f°C", id(weather_temperature_forecast).state);
            
            it.printf(55, 100, id(font_small), TextAlign::TOP_CENTER, "%s", id(weather_timestamp_0).state.c_str());
            it.printf(20, 118, id(font_mdi_medium), TextAlign::TOP_LEFT, "%s", weather_icon_map[id(weather_condition_0).state.c_str()].c_str());
            it.printf(55, 188, id(font_small), TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_0).state);
            
            it.printf(147, 100, id(font_small), TextAlign::TOP_CENTER, "%s", id(weather_timestamp_1).state.c_str());
            it.printf(112, 118, id(font_mdi_medium), TextAlign::TOP_LEFT, "%s", weather_icon_map[id(weather_condition_1).state.c_str()].c_str());
            it.printf(147, 188, id(font_small), TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_1).state);
            
            it.printf(236, 100, id(font_small), TextAlign::TOP_CENTER, "%s", id(weather_timestamp_2).state.c_str());
            it.printf(205, 118, id(font_mdi_medium), TextAlign::TOP_LEFT, "%s", weather_icon_map[id(weather_condition_2).state.c_str()].c_str());
            it.printf(236, 188, id(font_small), TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_2).state);
            
            it.printf(330, 100, id(font_small), TextAlign::TOP_CENTER, "%s", id(weather_timestamp_3).state.c_str());
            it.printf(298, 118, id(font_mdi_medium), TextAlign::TOP_LEFT, "%s", weather_icon_map[id(weather_condition_3).state.c_str()].c_str());
            it.printf(330, 188, id(font_small), TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_3).state);
            
            it.printf(425, 100, id(font_small), TextAlign::TOP_CENTER, "%s", id(weather_timestamp_4).state.c_str());
            it.printf(390, 118, id(font_mdi_medium), TextAlign::TOP_LEFT, "%s", weather_icon_map[id(weather_condition_4).state.c_str()].c_str());
            it.printf(425, 188, id(font_small), TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temperature_4).state);


            // FolloRen Section
            it.image(2, 240, id(i_recycle));
            it.printf(50, 244, id(font_medium), TextAlign::TOP_LEFT, "FolloRen");
            it.printf(50, 265, id(font_medium), TextAlign::TOP_LEFT, "%s", id(folloren_next).state.c_str());
            
            it.image(230, 240, id(i_trash_can));
            it.printf(255, 288, id(font_large), TextAlign::TOP_CENTER, "%s", id(folloren_restavfall).state.c_str());
            
            it.image(365, 240, id(i_newspaper));
            it.printf(390, 288, id(font_large), TextAlign::TOP_CENTER, "%s", id(folloren_papir).state.c_str());


            // NordPool Section
            it.graph(5, 360, id(graph_nordpool));
            it.printf(5, 340, id(font_small), TextAlign::TOP_LEFT, "%s", id(nordpool_time_0).state.c_str());
            it.printf(5, 533, id(font_medium), TextAlign::TOP_LEFT, "%2.0f Øre", id(nordpool_price_0).state);
            it.printf(it.get_width()/2, 340, id(font_small), TextAlign::TOP_CENTER, "%s", id(nordpool_time_4).state.c_str());
            it.printf(it.get_width()/2, 533, id(font_medium), TextAlign::TOP_CENTER, "%2.0f Øre", id(nordpool_price_4).state);
            it.printf(475, 340, id(font_small), TextAlign::TOP_RIGHT, "%s", id(nordpool_time_8).state.c_str());
            it.printf(475, 533, id(font_medium), TextAlign::TOP_RIGHT, "%2.0f Øre", id(nordpool_price_8).state);


            // Bus Section
            it.printf(270, 583, id(font_medium), TextAlign::TOP_CENTER, "Bregnefaret");
            it.printf(280, 612, id(font_small), TextAlign::TOP_LEFT, "510 Drøbak");
            it.printf(280, 633, id(font_small), TextAlign::TOP_LEFT, "%s", id(bus_bregnefaret_line_0).state.c_str());
            it.printf(260, 622, id(font_medium), TextAlign::TOP_RIGHT, "%s", id(bus_bregnefaret_due_at_0).state.c_str());

            it.printf(280, 660, id(font_small), TextAlign::TOP_LEFT, "510 Drøbak");
            it.printf(280, 679, id(font_small), TextAlign::TOP_LEFT, "%s", id(bus_bregnefaret_line_1).state.c_str());
            it.printf(260, 668, id(font_medium), TextAlign::TOP_RIGHT, "%s", id(bus_bregnefaret_due_at_1).state.c_str());

            it.printf(280, 706, id(font_small), TextAlign::TOP_LEFT, "510 Drøbak");
            it.printf(280, 725, id(font_small), TextAlign::TOP_LEFT, "%s", id(bus_bregnefaret_line_2).state.c_str());
            it.printf(260, 714, id(font_medium), TextAlign::TOP_RIGHT, "%s", id(bus_bregnefaret_due_at_2).state.c_str());


            // Car Section
            it.image(8, 630, id(i_car));
            it.printf(10, 679, id(font_large), TextAlign::TOP_LEFT, "%2.0f km", id(car_battery_range).state);
            it.printf(10, 700, id(font_large), TextAlign::TOP_LEFT, "%2.0f%%", id(car_battery_percent).state);


            // Refresh Timestamp
            // Code by EnsconcE from https://community.home-assistant.io/t/esphome-show-time/348903
            char str[17];
            time_t currTime = id(homeassistant_time).now().timestamp;
            strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
            it.printf(it.get_width()/2, 775, id(font_small), TextAlign::TOP_CENTER, "Oppdatert kl %s", str);
          }

# Buttons in Home Assistant
button:
  - platform: template
    name: "Repair Screen"
    entity_category: config
    on_press:
      - script.wait: update_screen
      - logger.log: "Trying to repair screen"
      - repeat: 
          count: 5
          then:
            - script.wait: update_screen
            - script.wait: repair_script
            - script.execute: repair_script
      - script.wait: repair_script
      - logger.log: "Repair script finished"
      - display.page.show: page_content

# Script for updating screen - Refresh display and publish refresh count and time.
script:
  - id: repair_script
    then:
      - display.page.show: page_black
      - component.update: display_eink
      - lambda: 'id(recorded_display_refresh) += 1;'
      - logger.log: "Black screen"
      - delay: 20s
      - display.page.show: page_white
      - component.update: display_eink
      - lambda: 'id(recorded_display_refresh) += 1;'
      - logger.log: "White screen"
      - delay: 20s
      - display.page.show: page_black
      - component.update: display_eink
      - lambda: 'id(recorded_display_refresh) += 1;'
      - logger.log: "Black screen"
      - delay: 20s

# Include custom fonts
font:
#  - id: font_tiny
    #file: 'fonts/segoeui.ttf'
#    file: 'fonts/GothamRnd-Book.ttf'
#    size: 18
#    glyphs: &norwegian-glyphs [ ',', '-', '.', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Æ', 'Ø', 'Å', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'æ', 'ø', 'å']
  - id: font_small
    #file: 'fonts/segoeui.ttf'
    file: 'gui/fonts/GothamRnd-Bold.ttf'
    size: 20
    glyphs: &norwegian-glyphs [ ' ', ',', '-', '.', ':', '%', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'Æ', 'Ø', 'Å', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'æ', 'ø', 'å']
#  - id: font_small_bold
    #file: 'fonts/segoeuib.ttf'
#    file: 'fonts/GothamRnd-Bold.ttf'
#    size: 20
#    glyphs: *norwegian-glyphs
  - id: font_medium
    #file: 'fonts/segoeui.ttf'
    file: 'gui/fonts/GothamRnd-Bold.ttf'
    size: 26
    glyphs: *norwegian-glyphs
#  - id: font_medium_bold
    #file: 'fonts/segoeuib.ttf'
#    file: 'fonts/GothamRnd-Bold.ttf'
#    size: 24
#    glyphs: *norwegian-glyphs
  - id: font_large
    #file: 'fonts/segoeui.ttf'
    file: 'gui/fonts/GothamRnd-Bold.ttf'
    size: 28
    glyphs: *norwegian-glyphs
#  - id: font_large_bold
    #file: 'fonts/seguisb.ttf'
#    file: 'fonts/GothamRnd-Bold.ttf'
#    size: 28
#    glyphs: *norwegian-glyphs
#  - id: font_huge
    #file: 'fonts/segoeui.ttf'
#    file: 'fonts/GothamRnd-Book.ttf'
#    size: 32
#    glyphs: *norwegian-glyphs
#  - id: font_huge_bold
    #file: 'fonts/seguisb.ttf'
#    file: 'fonts/GothamRnd-Bold.ttf'
#    size: 32
#    glyphs: *norwegian-glyphs
  # Include Material Design Icons font
  # Thanks to https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16
  - file: 'gui/fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 100
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
  - file: 'gui/fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medium
    size: 70
    glyphs: *mdi-weather-glyphs

# Include Images
image:
  - file: 'gui/img/car.png'
    id: i_car
    type: BINARY
    invert_alpha: true
#  - file: 'img/bus-clock.png'
#    id: i_bus_clock
#    ype: BINARY
  - file: 'gui/img/newspaper.png'
    id: i_newspaper
    type: BINARY
    invert_alpha: true
  - file: 'gui/img/recycle.png'
    id: i_recycle
    type: BINARY
    invert_alpha: true
  - file: 'gui/img/trash-can.png'
    id: i_trash_can
    type: BINARY
    invert_alpha: true

# Check if person is home
binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.waveshare_display_motion
    id: motion_detected

sensor:
  # Call sensors from HA.
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: car_battery_percent
    id: car_battery_percent
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: car_battery_range
    id: car_battery_range
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: temp_forecast
    id: weather_temperature_forecast
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: temp_measured
    id: weather_temperature_actual
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_temperature_0
    id: weather_temperature_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_temperature_1
    id: weather_temperature_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_temperature_2
    id: weather_temperature_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_temperature_3
    id: weather_temperature_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_temperature_4
    id: weather_temperature_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    id: nordpool_sensor
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price0
    id: nordpool_price_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: price1
#    id: nordpool_price_1
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: price2
#    id: nordpool_price_2
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: price3
#    id: nordpool_price_3
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price4
    id: nordpool_price_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: price5
#    id: nordpool_price_5
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: price6
#    id: nordpool_price_6
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: price7
#    id: nordpool_price_7
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: price8
    id: nordpool_price_8
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

graph:
  - id: graph_nordpool
    duration: 9h
    border: false
    x_grid: 1h
    y_grid: 10.0
    width: 470
    height: 170
    traces:
      - sensor: nordpool_sensor
        line_thickness: 8


# Strings from Home Assistant
text_sensor:
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: bus_bregnefaret_time_0
    id: bus_bregnefaret_due_at_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: bus_bregnefaret_line_0
    id: bus_bregnefaret_line_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: bus_bregnefaret_time_1
    id: bus_bregnefaret_due_at_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: bus_bregnefaret_line_1
    id: bus_bregnefaret_line_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: bus_bregnefaret_line_2
    id: bus_bregnefaret_line_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: bus_bregnefaret_time_2
    id: bus_bregnefaret_due_at_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_display_data
#    attribute: bus_bregnefaret_line_3
#    id: bus_bregnefaret_line_3
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_display_data
#    attribute: bus_bregnefaret_time_3
#    id: bus_bregnefaret_due_at_3
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'

#  - platform: homeassistant
#    entity_id: sensor.busstider_jettegryta_jettegryta_platform_8758
#    attribute: due_at
#    id: bus_jettegryta_due_at_0
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_display_data
#    attribute: bus_jettegryta_line_0
#    id: bus_jettegryta_line_0
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.busstider_jettegryta_jettegryta_platform_8758
#    attribute: next_due_at
#    id: bus_jettegryta_due_at_1
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_display_data
#    attribute: bus_jettegryta_line_1
#    id: bus_jettegryta_line_1
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
  
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: folloren_next
    id: folloren_next
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: folloren_restavfall
    id: folloren_restavfall
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: folloren_papir
    id: folloren_papir
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

#  - platform: homeassistant
#    entity_id: weather.hjemme_hourly
#    id: weather_state
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_condition_now
    id: weather_condition_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_condition_0
    id: weather_condition_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_timestamp_0
    id: weather_timestamp_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_condition_1
    id: weather_condition_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_timestamp_1
    id: weather_timestamp_1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_condition_2
    id: weather_condition_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_timestamp_2
    id: weather_timestamp_2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_condition_3
    id: weather_condition_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_timestamp_3
    id: weather_timestamp_3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_condition_4
    id: weather_condition_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_display_data
    attribute: weather_timestamp_4
    id: weather_timestamp_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time0
    id: nordpool_time_0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: time1
#    id: nordpool_time_1
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: time2
#    id: nordpool_time_2
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: time3
#    id: nordpool_time_3
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time4
    id: nordpool_time_4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: time5
#    id: nordpool_time_5
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: time6
#    id: nordpool_time_6
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
#  - platform: homeassistant
#    entity_id: sensor.waveshare_nordpool_future_offset
#    attribute: time7
#    id: nordpool_time_7
#    on_value:
#      then:
#        - lambda: 'id(data_updated) = true;'
  - platform: homeassistant
    entity_id: sensor.waveshare_nordpool_future_offset
    attribute: time8
    id: nordpool_time_8
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'